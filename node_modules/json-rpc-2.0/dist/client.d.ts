import { JSONRPCID, JSONRPCParams, JSONRPCRequest, JSONRPCResponse } from "./models";
export declare type SendRequest<ClientParams> = (payload: any, clientParams: ClientParams | undefined) => PromiseLike<void> | ((clientParams?: ClientParams) => PromiseLike<void>);
export declare type CreateID = () => JSONRPCID;
export declare class JSONRPCClient<ClientParams = void> {
    private _send;
    private createID?;
    private idToResolveMap;
    private id;
    constructor(_send: SendRequest<ClientParams>, createID?: CreateID | undefined);
    private _createID;
    request(method: string, params?: JSONRPCParams, clientParams?: ClientParams): PromiseLike<any>;
    requestAdvanced(request: JSONRPCRequest, clientParams?: ClientParams): PromiseLike<JSONRPCResponse>;
    notify(method: string, params?: JSONRPCParams, clientParams?: ClientParams): void;
    send(payload: any, clientParams: ClientParams | undefined): PromiseLike<void>;
    rejectAllPendingRequests(message: string): void;
    receive(response: JSONRPCResponse): void;
}
