"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var _1 = require(".");
var models_1 = require("./models");
mocha_1.describe("JSONRPCServer", function () {
    var server;
    var response;
    mocha_1.beforeEach(function () {
        response = null;
        server = new _1.JSONRPCServer();
    });
    var waitUntil = function (predicate) {
        return Promise.resolve().then(function () {
            if (!predicate()) {
                return waitUntil(predicate);
            }
        });
    };
    mocha_1.describe("having an echo method", function () {
        ["legacy", "new"].forEach(function (apiModel) {
            mocha_1.describe("using " + apiModel + " API", function () {
                mocha_1.beforeEach(function () {
                    var legacyMethod = function (params) { return function (serverParams) {
                        return newMethod(params, serverParams);
                    }; };
                    var newMethod = function (_a, serverParams) {
                        var text = _a.text;
                        if (serverParams) {
                            return serverParams.userID + " said " + text;
                        }
                        else {
                            return text;
                        }
                    };
                    server.addMethod("echo", apiModel === "legacy" ? legacyMethod : newMethod);
                });
                mocha_1.describe("receiving a request to the method", function () {
                    mocha_1.beforeEach(function () {
                        return server
                            .receive({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            method: "echo",
                            params: { text: "foo" },
                        })
                            .then(function (givenResponse) { return (response = givenResponse); });
                    });
                    mocha_1.it("should echo the text", function () {
                        chai_1.expect(response).to.deep.equal({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            result: "foo",
                        });
                    });
                });
                mocha_1.describe("receiving a request to the method with user ID", function () {
                    mocha_1.beforeEach(function () {
                        return server
                            .receiveJSON(JSON.stringify({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            method: "echo",
                            params: { text: "foo" },
                        }), { userID: "bar" })
                            .then(function (givenResponse) { return (response = givenResponse); });
                    });
                    mocha_1.it("should echo the text with the user ID", function () {
                        chai_1.expect(response).to.deep.equal({
                            jsonrpc: _1.JSONRPC,
                            id: 0,
                            result: "bar said foo",
                        });
                    });
                });
            });
        });
    });
    mocha_1.describe("responding undefined", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("ack", function () { return undefined; });
            return server
                .receive({ jsonrpc: _1.JSONRPC, id: 0, method: "ack" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should response with null result", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                result: null,
            });
        });
    });
    mocha_1.describe("throwing", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("throw", function () {
                throw new Error("Test throwing");
            });
            return server
                .receive({ jsonrpc: _1.JSONRPC, id: 0, method: "throw" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: 0,
                    message: "Test throwing",
                },
            });
        });
    });
    mocha_1.describe("rejecting", function () {
        mocha_1.beforeEach(function () {
            server.addMethodAdvanced("reject", function () {
                return Promise.reject(new Error("Test rejecting"));
            });
            return server
                .receive({ jsonrpc: _1.JSONRPC, id: 0, method: "reject" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: 0,
                    message: "Test rejecting",
                },
            });
        });
    });
    mocha_1.describe("responding to a notification", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("foo", function () { return "foo"; });
            return server
                .receive({ jsonrpc: _1.JSONRPC, method: "foo" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should not respond", function () {
            chai_1.expect(response).to.be.null;
        });
    });
    mocha_1.describe("error on a notification", function () {
        mocha_1.beforeEach(function () {
            server.addMethod("foo", function () { return Promise.reject(new Error("foo")); });
            return server
                .receive({ jsonrpc: _1.JSONRPC, method: "foo" })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should not respond", function () {
            chai_1.expect(response).to.be.null;
        });
    });
    mocha_1.describe("responding null to a request", function () {
        mocha_1.beforeEach(function () {
            server.addMethodAdvanced("foo", function () { return Promise.resolve(null); });
            return server
                .receive({
                jsonrpc: _1.JSONRPC,
                id: 0,
                method: "foo",
            })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: models_1.JSONRPCErrorCode.InternalError,
                    message: "Internal error",
                },
            });
        });
    });
    mocha_1.describe("receiving a request to an unknown method", function () {
        mocha_1.beforeEach(function () {
            return server
                .receive({
                jsonrpc: _1.JSONRPC,
                id: 0,
                method: "foo",
            })
                .then(function (givenResponse) { return (response = givenResponse); });
        });
        mocha_1.it("should respond error", function () {
            chai_1.expect(response).to.deep.equal({
                jsonrpc: _1.JSONRPC,
                id: 0,
                error: {
                    code: models_1.JSONRPCErrorCode.MethodNotFound,
                    message: "Method not found",
                },
            });
        });
    });
    [{}, "", "invalid JSON"].forEach(function (invalidJSON) {
        mocha_1.describe("receiving an invalid JSON (" + invalidJSON + ")", function () {
            var response;
            mocha_1.beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, server.receiveJSON(invalidJSON)];
                        case 1:
                            response = (_a.sent());
                            return [2 /*return*/];
                    }
                });
            }); });
            mocha_1.it("should respond an error", function () {
                chai_1.expect(response.error.code).to.equal(models_1.JSONRPCErrorCode.ParseError);
            });
        });
    });
    [
        {},
        { jsonrpc: _1.JSONRPC },
        { jsonrpc: _1.JSONRPC + "invalid", method: "" },
    ].forEach(function (invalidRequest) {
        mocha_1.describe("receiving an invalid request (" + JSON.stringify(invalidRequest) + ")", function () {
            var response;
            mocha_1.beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, server.receive(invalidRequest)];
                        case 1:
                            response = (_a.sent());
                            return [2 /*return*/];
                    }
                });
            }); });
            mocha_1.it("should respond an error", function () {
                chai_1.expect(response.error.code).to.equal(models_1.JSONRPCErrorCode.InvalidRequest);
            });
        });
    });
});
