"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var models_1 = require("./models");
var internal_1 = require("./internal");
var logHigherOrderFunctionDeprecationWarning = internal_1.createLogDeprecationWarning("Using a higher order function on JSONRPCClient send method is deprecated.\nInstead of this: new JSONRPCClient((jsonRPCClient) => (clientParams) => /* no change here */)\nDo this:         new JSONRPCClient((jsonRPCClient, clientParams) => /* no change here */)\nThe old way still works, but we will drop the support in the future.");
var JSONRPCClient = /** @class */ (function () {
    function JSONRPCClient(_send, createID) {
        this._send = _send;
        this.createID = createID;
        this.idToResolveMap = new Map();
        this.id = 0;
    }
    JSONRPCClient.prototype._createID = function () {
        if (this.createID) {
            return this.createID();
        }
        else {
            return ++this.id;
        }
    };
    JSONRPCClient.prototype.request = function (method, params, clientParams) {
        var request = {
            jsonrpc: models_1.JSONRPC,
            method: method,
            params: params,
            id: this._createID(),
        };
        return this.requestAdvanced(request, clientParams).then(function (response) {
            if (response.result !== undefined && !response.error) {
                return response.result;
            }
            else if (response.result === undefined && response.error) {
                return Promise.reject(new Error(response.error.message));
            }
            else {
                return Promise.reject(new Error("An unexpected error occurred"));
            }
        });
    };
    JSONRPCClient.prototype.requestAdvanced = function (request, clientParams) {
        var _this = this;
        var promise = new Promise(function (resolve) {
            return _this.idToResolveMap.set(request.id, resolve);
        });
        return this.send(request, clientParams).then(function () { return promise; }, function (error) {
            _this.receive(models_1.createJSONRPCErrorResponse(request.id, 0, (error && error.message) || "Failed to send a request"));
            return promise;
        });
    };
    JSONRPCClient.prototype.notify = function (method, params, clientParams) {
        this.send({
            jsonrpc: models_1.JSONRPC,
            method: method,
            params: params,
        }, clientParams).then(undefined, function () { return undefined; });
    };
    JSONRPCClient.prototype.send = function (payload, clientParams) {
        var promiseOrFunction = this._send(payload, clientParams);
        if (typeof promiseOrFunction === "function") {
            logHigherOrderFunctionDeprecationWarning();
            promiseOrFunction = promiseOrFunction(clientParams);
        }
        return promiseOrFunction;
    };
    JSONRPCClient.prototype.rejectAllPendingRequests = function (message) {
        this.idToResolveMap.forEach(function (resolve, id) {
            return resolve(models_1.createJSONRPCErrorResponse(id, 0, message));
        });
        this.idToResolveMap.clear();
    };
    JSONRPCClient.prototype.receive = function (response) {
        var resolve = this.idToResolveMap.get(response.id);
        if (resolve) {
            this.idToResolveMap.delete(response.id);
            resolve(response);
        }
    };
    return JSONRPCClient;
}());
exports.JSONRPCClient = JSONRPCClient;
