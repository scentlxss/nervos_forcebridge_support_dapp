"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var _1 = require(".");
mocha_1.describe("JSONRPCClient", function () {
    var client;
    var id;
    var lastRequest;
    var lastClientParams;
    var resolve;
    var reject;
    ["legacy", "new"].forEach(function (apiModel) {
        mocha_1.describe("using " + apiModel + " API", function () {
            mocha_1.beforeEach(function () {
                id = 0;
                lastRequest = undefined;
                resolve = undefined;
                reject = undefined;
                var legacySend = function (request) { return function (clientParams) {
                    return newSend(request, clientParams);
                }; };
                var newSend = function (request, clientParams) {
                    lastRequest = request;
                    lastClientParams = clientParams;
                    return new Promise(function (givenResolve, givenReject) {
                        resolve = givenResolve;
                        reject = givenReject;
                    });
                };
                client = new _1.JSONRPCClient(apiModel === "legacy" ? legacySend : newSend, function () { return ++id; });
            });
            mocha_1.describe("requesting", function () {
                var result;
                var error;
                var promise;
                mocha_1.beforeEach(function () {
                    result = undefined;
                    error = undefined;
                    promise = client.request("foo", ["bar"]).then(function (givenResult) { return (result = givenResult); }, function (givenError) { return (error = givenError); });
                });
                mocha_1.it("should send the request", function () {
                    chai_1.expect(lastRequest).to.deep.equal({
                        jsonrpc: _1.JSONRPC,
                        id: id,
                        method: "foo",
                        params: ["bar"],
                    });
                });
                mocha_1.describe("succeeded on client side", function () {
                    mocha_1.beforeEach(function () {
                        resolve();
                    });
                    mocha_1.describe("and succeeded on server side too", function () {
                        var response;
                        mocha_1.beforeEach(function () {
                            response = {
                                jsonrpc: _1.JSONRPC,
                                id: id,
                                result: "foo",
                            };
                            client.receive(response);
                            return promise;
                        });
                        mocha_1.it("should resolve the result", function () {
                            chai_1.expect(result).to.equal(response.result);
                        });
                    });
                    mocha_1.describe("and succeeded on server side with falsy but defined result", function () {
                        mocha_1.beforeEach(function () {
                            client.receive({
                                jsonrpc: _1.JSONRPC,
                                id: id,
                                result: 0,
                            });
                            return promise;
                        });
                        mocha_1.it("should resolve the result", function () {
                            chai_1.expect(result).to.equal(0);
                        });
                    });
                    mocha_1.describe("but failed on server side", function () {
                        var response;
                        mocha_1.beforeEach(function () {
                            response = {
                                jsonrpc: _1.JSONRPC,
                                id: id,
                                error: {
                                    code: 0,
                                    message: "This is a test. Do not panic.",
                                },
                            };
                            client.receive(response);
                            return promise;
                        });
                        mocha_1.it("should reject with the error message", function () {
                            chai_1.expect(error.message).to.equal(response.error.message);
                        });
                    });
                    mocha_1.describe("but server responded invalid response", function () {
                        mocha_1.describe("like having both result and error", function () {
                            var response;
                            mocha_1.beforeEach(function () {
                                response = {
                                    jsonrpc: _1.JSONRPC,
                                    id: id,
                                    result: "foo",
                                    error: {
                                        code: 0,
                                        message: "bar",
                                    },
                                };
                                client.receive(response);
                                return promise;
                            });
                            mocha_1.it("should reject", function () {
                                chai_1.expect(error).to.not.be.undefined;
                            });
                        });
                        mocha_1.describe("like not having both result and error", function () {
                            var response;
                            mocha_1.beforeEach(function () {
                                response = {
                                    jsonrpc: _1.JSONRPC,
                                    id: id,
                                };
                                client.receive(response);
                                return promise;
                            });
                            mocha_1.it("should reject", function () {
                                chai_1.expect(error).to.not.be.undefined;
                            });
                        });
                    });
                    mocha_1.describe("but I reject all pending requests", function () {
                        var message;
                        mocha_1.beforeEach(function () {
                            message = "Connection is closed.";
                            client.rejectAllPendingRequests(message);
                            return promise;
                        });
                        mocha_1.it("should reject the request", function () {
                            chai_1.expect(error.message).to.equal(message);
                        });
                        mocha_1.describe("receiving a response", function () {
                            mocha_1.beforeEach(function () {
                                client.receive({
                                    jsonrpc: _1.JSONRPC,
                                    id: id,
                                    result: "foo",
                                });
                                return promise;
                            });
                            mocha_1.it("should not resolve the promise again", function () {
                                chai_1.expect(result).to.be.undefined;
                            });
                        });
                    });
                });
                mocha_1.describe("failed on client side", function () {
                    var expected;
                    mocha_1.beforeEach(function () {
                        expected = new Error("This is a test. Do not panic.");
                        reject(expected);
                        return promise;
                    });
                    mocha_1.it("should reject the promise", function () {
                        chai_1.expect(error.message).to.equal(expected.message);
                    });
                });
                mocha_1.describe("failed on client side with no error object", function () {
                    mocha_1.beforeEach(function () {
                        reject(undefined);
                        return promise;
                    });
                    mocha_1.it("should reject the promise", function () {
                        chai_1.expect(error.message).to.equal("Failed to send a request");
                    });
                });
                mocha_1.describe("failed on client side with an error object without message", function () {
                    mocha_1.beforeEach(function () {
                        reject({});
                        return promise;
                    });
                    mocha_1.it("should reject the promise", function () {
                        chai_1.expect(error.message).to.equal("Failed to send a request");
                    });
                });
            });
            mocha_1.describe("requesting with client params", function () {
                var expected;
                mocha_1.beforeEach(function () {
                    expected = { token: "baz" };
                    client.request("foo", undefined, expected);
                });
                mocha_1.it("should pass the client params to send function", function () {
                    chai_1.expect(lastClientParams).to.deep.equal(expected);
                });
            });
            mocha_1.describe("notifying", function () {
                mocha_1.beforeEach(function () {
                    client.notify("foo", ["bar"]);
                });
                mocha_1.it("should send the notification", function () {
                    chai_1.expect(lastRequest).to.deep.equal({
                        jsonrpc: _1.JSONRPC,
                        method: "foo",
                        params: ["bar"],
                    });
                });
            });
            mocha_1.describe("notifying with client params", function () {
                var expected;
                mocha_1.beforeEach(function () {
                    expected = { token: "baz" };
                    client.notify("foo", undefined, expected);
                });
                mocha_1.it("should pass the client params to send function", function () {
                    chai_1.expect(lastClientParams).to.deep.equal(expected);
                });
            });
        });
    });
});
