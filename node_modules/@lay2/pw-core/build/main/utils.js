"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readBigUInt128LE = exports.toBigUInt128LE = exports.readBigUInt64LE = exports.toBigUInt64LE = exports.readBigUInt32LE = exports.cellOccupiedBytes = exports.scriptOccupiedBytes = exports.hexDataOccupiedBytes = exports.spliceStr = exports.verifyTronAddress = exports.verifyEosAddress = exports.verifyEthAddress = exports.verifyCkbAddress = exports.parseAddress = exports.generateAddress = exports.hexToByteArray = exports.byteArrayToHex = exports.LumosConfigs = exports.rationalNumberToBnString = exports.bnStringToRationalNumber = exports.ckbToShannon = exports.shannonToCKB = void 0;
const jsbi_1 = __importDefault(require("jsbi"));
const bech32_1 = __importDefault(require("bech32"));
const decimal_js_1 = __importDefault(require("decimal.js"));
const BECH32_LIMIT = 1023;
exports.shannonToCKB = (shannonAmount, options) => exports.bnStringToRationalNumber(shannonAmount, 8, options);
exports.ckbToShannon = (ckbAmount) => exports.rationalNumberToBnString(ckbAmount, 8);
exports.bnStringToRationalNumber = (bn, decimals, options) => {
    if (!Number.isInteger(decimals) || decimals < 0) {
        throw new Error("value of 'decimals' must be a natural integer");
    }
    const n = new decimal_js_1.default(bn);
    if (n.isNeg()) {
        bn = bn.slice(1);
    }
    let int = bn;
    let dec = '';
    if (decimals > 0) {
        const intLen = bn.length - decimals;
        int = intLen > 0 ? bn.substr(0, intLen) : '0';
        dec = intLen > 0 ? bn.slice(intLen) : `${'0'.repeat(-intLen)}${bn}`;
        dec = new decimal_js_1.default(`0.${dec}`).toFixed().slice(2);
    }
    if (options) {
        if (options.fixed !== undefined) {
            if (!Number.isInteger(options.fixed) ||
                options.fixed < 1
            // || options.fixed > decimals
            ) {
                throw new Error(
                // `value of \'fixed\' must be a positive integer and not bigger than decimals value ${decimals}`
                `value of 'fixed' must be a positive integer`);
            }
            const res = new decimal_js_1.default(`0.${dec}`).toFixed(options.fixed).split('.');
            dec = res[1];
            if (res[0] === '1') {
                int = jsbi_1.default.add(jsbi_1.default.BigInt(int), jsbi_1.default.BigInt(1)).toString();
            }
        }
        else if (options.pad && dec.length < decimals) {
            dec = `${dec}${'0'.repeat(decimals - dec.length)}`;
        }
        if (options.commify) {
            int = int.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        }
        if (options.section === 'decimal') {
            return dec;
        }
        if (options.section === 'integer') {
            return n.isNeg() ? `-${int}` : int;
        }
    }
    if (n.isNeg()) {
        int = `-${int}`;
    }
    if (dec.length)
        return `${int}.${dec}`;
    return int;
};
exports.rationalNumberToBnString = (rational, decimals) => {
    if (!Number.isInteger(decimals) || decimals < 0) {
        throw new Error("value of 'decimals' must be a natural integer");
    }
    if (decimals === 0)
        return rational;
    if (rational === '0x')
        rational = '0';
    // const r = new Decimal(rational);
    // if (r.dp() > decimals) {
    //   throw new Error(
    //     `decimals ${decimals} is smaller than the digits number of ${rational}`
    //   );
    // }
    if (typeof rational === 'number') {
        const dp = new decimal_js_1.default(rational).dp();
        rational = Number(rational).toFixed(dp);
    }
    const parts = `${rational}`.split('.');
    if (!!parts[1] && parts[1].length > decimals) {
        throw new Error(`decimals ${decimals} is smaller than the digits number of ${rational}`);
    }
    return `${parts.join('')}${'0'.repeat(decimals - (!!parts[1] ? parts[1].length : 0))}`;
};
// from @lumos/helper
const LINA = {
    PREFIX: 'ckb',
    SCRIPTS: {
        SECP256K1_BLAKE160: {
            SCRIPT: {
                code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
                hash_type: 'type',
            },
            OUT_POINT: {
                tx_hash: '0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c',
                index: '0x0',
            },
            DEP_TYPE: 'dep_group',
            SHORT_ID: 0,
        },
        SECP256K1_BLAKE160_MULTISIG: {
            SCRIPT: {
                code_hash: '0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8',
                hash_type: 'type',
            },
            OUT_POINT: {
                tx_hash: '0x71a7ba8fc96349fea0ed3a5c47992e3b4084b031a42264a018e0072e8172e46c',
                index: '0x1',
            },
            DEP_TYPE: 'dep_group',
            SHORT_ID: 1,
        },
    },
};
const AGGRON4 = {
    PREFIX: 'ckt',
    SCRIPTS: {
        SECP256K1_BLAKE160: {
            SCRIPT: {
                code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',
                hash_type: 'type',
            },
            OUT_POINT: {
                tx_hash: '0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37',
                index: '0x0',
            },
            DEP_TYPE: 'dep_group',
            SHORT_ID: 0,
        },
        SECP256K1_BLAKE160_MULTISIG: {
            SCRIPT: {
                code_hash: '0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8',
                hash_type: 'type',
            },
            OUT_POINT: {
                tx_hash: '0x6495cede8d500e4309218ae50bbcadb8f722f24cc7572dd2274f5876cb603e4e',
                index: '0x1',
            },
            DEP_TYPE: 'dep_group',
            SHORT_ID: 1,
        },
    },
};
exports.LumosConfigs = [LINA, AGGRON4];
function byteArrayToHex(a) {
    return '0x' + a.map((i) => ('00' + i.toString(16)).slice(-2)).join('');
}
exports.byteArrayToHex = byteArrayToHex;
function hexToByteArray(h) {
    if (!/^(0x)?([0-9a-fA-F][0-9a-fA-F])*$/.test(h)) {
        throw new Error('Invalid hex string!');
    }
    if (h.startsWith('0x')) {
        h = h.slice(2);
    }
    const array = [];
    while (h.length >= 2) {
        array.push(parseInt(h.slice(0, 2), 16));
        h = h.slice(2);
    }
    return array;
}
exports.hexToByteArray = hexToByteArray;
function generateAddress(script, { config = LINA } = {}) {
    const scriptTemplate = Object.values(config.SCRIPTS).find((s) => s.SCRIPT.code_hash === script.code_hash &&
        s.SCRIPT.hash_type === script.hash_type);
    const data = [];
    if (scriptTemplate && scriptTemplate.SHORT_ID !== undefined) {
        data.push(1, scriptTemplate.SHORT_ID);
        data.push(...hexToByteArray(script.args));
    }
    else {
        data.push(script.hash_type === 'type' ? 4 : 2);
        data.push(...hexToByteArray(script.code_hash));
        data.push(...hexToByteArray(script.args));
    }
    const words = bech32_1.default.toWords(data);
    return bech32_1.default.encode(config.PREFIX, words, BECH32_LIMIT);
}
exports.generateAddress = generateAddress;
function parseAddress(address, { config = LINA } = {}) {
    const { prefix, words } = bech32_1.default.decode(address, BECH32_LIMIT);
    if (prefix !== config.PREFIX) {
        throw Error(`Invalid prefix! Expected: ${config.PREFIX}, actual: ${prefix}`);
    }
    const data = bech32_1.default.fromWords(words);
    switch (data[0]) {
        case 1:
            if (data.length < 2) {
                throw Error(`Invalid payload length!`);
            }
            const scriptTemplate = Object.values(config.SCRIPTS).find((s) => s.SHORT_ID === data[1]);
            if (!scriptTemplate) {
                throw Error(`Invalid code hash index: ${data[1]}!`);
            }
            return Object.assign(Object.assign({}, scriptTemplate.SCRIPT), { args: byteArrayToHex(data.slice(2)) });
        case 2:
            if (data.length < 33) {
                throw Error(`Invalid payload length!`);
            }
            return {
                code_hash: byteArrayToHex(data.slice(1, 33)),
                hash_type: 'data',
                args: byteArrayToHex(data.slice(33)),
            };
        case 4:
            if (data.length < 33) {
                throw Error(`Invalid payload length!`);
            }
            return {
                code_hash: byteArrayToHex(data.slice(1, 33)),
                hash_type: 'type',
                args: byteArrayToHex(data.slice(33)),
            };
    }
    throw Error(`Invalid payload format type: ${data[0]}`);
}
exports.parseAddress = parseAddress;
function verifyCkbAddress(address) {
    try {
        const config = address.startsWith('ckb') ? LINA : AGGRON4;
        parseAddress(address, { config });
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.verifyCkbAddress = verifyCkbAddress;
function verifyEthAddress(address) {
    return /^0x[a-fA-F0-9]{40}$/.test(address);
}
exports.verifyEthAddress = verifyEthAddress;
function verifyEosAddress(address) {
    return /(^[a-z1-5.]{0,11}[a-z1-5]$)|(^[a-z1-5.]{12}[a-j1-5]$)/.test(address);
}
exports.verifyEosAddress = verifyEosAddress;
function verifyTronAddress(address) {
    // TNV2p8Zmy5JcZWbtn59Qee8jTdGmCRC6e8
    return /^T[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{33}$/.test(address);
}
exports.verifyTronAddress = verifyTronAddress;
function spliceStr(original, idx, rem, str) {
    return original.slice(0, idx) + str + original.slice(idx + Math.abs(rem));
}
exports.spliceStr = spliceStr;
exports.hexDataOccupiedBytes = (hexString) => {
    // Exclude 0x prefix, and every 2 hex digits are one byte
    return (hexString.length - 2) / 2;
};
exports.scriptOccupiedBytes = (script) => {
    if (script !== undefined && script !== null) {
        return (1 +
            exports.hexDataOccupiedBytes(script.codeHash) +
            exports.hexDataOccupiedBytes(script.args)
        //   script.args.map(hexDataOccupiedBytes).reduce((x, y) => x + y, 0)
        );
    }
    return 0;
};
exports.cellOccupiedBytes = (cell) => {
    return (8 +
        exports.hexDataOccupiedBytes(cell.data) +
        exports.scriptOccupiedBytes(cell.lock) +
        exports.scriptOccupiedBytes(cell.type));
};
function readBigUInt32LE(hex) {
    if (hex.slice(0, 2) !== '0x') {
        throw new Error('hex must start with 0x');
    }
    const dv = new DataView(new ArrayBuffer(4));
    dv.setUint32(0, Number(hex.slice(0, 10)), true);
    return jsbi_1.default.BigInt(dv.getUint32(0, false));
    // return BigInt(dv.getUint32(0, false));
}
exports.readBigUInt32LE = readBigUInt32LE;
function toBigUInt64LE(num) {
    const hexNumber = jsbi_1.default.BigInt(num)
        .toString(16)
        .slice(0, 16)
        .padStart(16, '0');
    const buffer = hexToByteArray(`0x${hexNumber}`).reverse();
    return byteArrayToHex(buffer);
}
exports.toBigUInt64LE = toBigUInt64LE;
function readBigUInt64LE(hex) {
    if (hex.slice(0, 2) !== '0x') {
        throw new Error('hex must start with 0x');
    }
    const buf = hex.slice(2).padEnd(16, 0);
    const viewRight = `0x${buf.slice(0, 8)}`;
    const viewLeft = `0x${buf.slice(8, 16)}`;
    const numLeft = readBigUInt32LE(viewLeft).toString(16).padStart(8, '0');
    const numRight = readBigUInt32LE(viewRight).toString(16).padStart(8, '0');
    return jsbi_1.default.BigInt(`0x${numLeft}${numRight}`);
}
exports.readBigUInt64LE = readBigUInt64LE;
function toBigUInt128LE(u128) {
    const viewRight = toBigUInt64LE(jsbi_1.default.signedRightShift(jsbi_1.default.BigInt(u128), jsbi_1.default.BigInt(64)));
    const viewLeft = toBigUInt64LE(jsbi_1.default.bitwiseAnd(jsbi_1.default.BigInt(u128), jsbi_1.default.BigInt('0xffffffffffffffff')));
    return `${viewLeft}${viewRight.slice(2)}`;
}
exports.toBigUInt128LE = toBigUInt128LE;
function readBigUInt128LE(hex) {
    if (hex.slice(0, 2) !== '0x') {
        throw new Error('hex must start with 0x');
    }
    const buf = hex.slice(2).padEnd(32, 0);
    const viewRight = `0x${buf.slice(0, 16)}`;
    const viewLeft = `0x${buf.slice(16, 32)}`;
    const numLeft = readBigUInt64LE(viewLeft).toString(16).padStart(16, '0');
    const numRight = readBigUInt64LE(viewRight).toString(16).padStart(16, '0');
    return jsbi_1.default.BigInt(`0x${numLeft}${numRight}`);
}
exports.readBigUInt128LE = readBigUInt128LE;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLG9EQUE0QjtBQUU1Qiw0REFBaUM7QUFFakMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBRWIsUUFBQSxZQUFZLEdBQUcsQ0FDMUIsYUFBcUIsRUFDckIsT0FBc0IsRUFDZCxFQUFFLENBQUMsZ0NBQXdCLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUVwRCxRQUFBLFlBQVksR0FBRyxDQUFDLFNBQWlCLEVBQVUsRUFBRSxDQUN4RCxnQ0FBd0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFNUIsUUFBQSx3QkFBd0IsR0FBRyxDQUN0QyxFQUFVLEVBQ1YsUUFBZ0IsRUFDaEIsT0FBc0IsRUFDdEIsRUFBRTtJQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBSSxvQkFBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ2IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7SUFFRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7UUFDaEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7UUFDcEMsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFN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