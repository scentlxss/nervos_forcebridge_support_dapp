"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainID = void 0;
const ckb_js_toolkit_1 = require("./ckb-js-toolkit");
const constants_1 = require("./constants");
const signers_1 = require("./signers");
const collectors_1 = require("./collectors");
const builders_1 = require("./builders");
const providers_1 = require("./providers");
var ChainID;
(function (ChainID) {
    ChainID[ChainID["ckb"] = 0] = "ckb";
    ChainID[ChainID["ckb_testnet"] = 1] = "ckb_testnet";
    ChainID[ChainID["ckb_dev"] = 2] = "ckb_dev";
})(ChainID = exports.ChainID || (exports.ChainID = {}));
/**
 * The default main class of pw-core
 */
class PWCore {
    constructor(nodeUrl) {
        this._rpc = new ckb_js_toolkit_1.RPC(nodeUrl);
    }
    /**
     * Initialize the environment required by pw-core
     */
    async init(provider, defaultCollector, chainId, config) {
        if (chainId !== undefined) {
            if (!(chainId in ChainID)) {
                throw new Error(`invalid chainId ${chainId}`);
            }
            PWCore.chainId = chainId;
        }
        else {
            const info = await this.rpc.get_blockchain_info();
            PWCore.chainId = {
                ckb: ChainID.ckb,
                ckb_testnet: ChainID.ckb_testnet,
                ckb_dev: ChainID.ckb_dev,
            }[info.chain];
        }
        if (PWCore.chainId === ChainID.ckb_dev) {
            if (!config) {
                throw new Error('config must be provided for dev chain');
            }
            PWCore.config = config;
        }
        else {
            // merge customized config to default one
            PWCore.config = Object.assign(Object.assign({}, [constants_1.CHAIN_SPECS.Lina, constants_1.CHAIN_SPECS.Aggron][PWCore.chainId]), config);
        }
        if (provider instanceof providers_1.Provider) {
            PWCore.provider = await provider.init();
        }
        else {
            throw new Error('provider must be provided');
        }
        if (defaultCollector instanceof collectors_1.Collector) {
            PWCore.defaultCollector = defaultCollector;
        }
        else {
            throw new Error('defaultCollector must be provided');
        }
        return this;
    }
    /**
     * Return a RPC instance defined in package 'ckb-js-toolkit'
     */
    get rpc() {
        return this._rpc;
    }
    /**
     * Transfer CKB to any address
     * @param address The receiver's address
     * @param amount The amount of CKB to send
     * @param options The transaction builder options for this transaction.
     */
    async send(address, amount, options) {
        const simpleBuilder = new builders_1.SimpleBuilder(address, amount, options);
        return this.sendTransaction(simpleBuilder);
    }
    /**
     * Send an built transaction or a builder
     * @param toSend
     * @param signer
     */
    async sendTransaction(toSend, signer) {
        const tx = toSend instanceof builders_1.Builder ? await toSend.build() : toSend;
        tx.validate();
        if (!signer) {
            signer = new signers_1.DefaultSigner(PWCore.provider);
        }
        return this.rpc.send_transaction(ckb_js_toolkit_1.transformers.TransformTransaction(await signer.sign(tx)));
    }
    /**
     * Transfer sudt to any address
     * @param sudt The sudt definition
     * @param address the receiver's address
     * @param amount the aount of sudt to send
     * @param options The transaction builder options for this transaction.
     * @returns the transaction hash
     */
    async sendSUDT(sudt, address, amount, createAcp, signer, options) {
        const builder = createAcp
            ? new builders_1.SimpleSUDTBuilder(sudt, address, amount, options)
            : new builders_1.SimpleSUDTACPBuilder(sudt, address, amount, options);
        return this.sendTransaction(builder, signer);
    }
}
exports.default = PWCore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFEQUFxRDtBQUNyRCwyQ0FBMEM7QUFHMUMsdUNBQWtEO0FBQ2xELDZDQUF5QztBQUN6Qyx5Q0FNb0I7QUFDcEIsMkNBQXVDO0FBR3ZDLElBQVksT0FJWDtBQUpELFdBQVksT0FBTztJQUNqQixtQ0FBRyxDQUFBO0lBQ0gsbURBQVcsQ0FBQTtJQUNYLDJDQUFPLENBQUE7QUFDVCxDQUFDLEVBSlcsT0FBTyxHQUFQLGVBQU8sS0FBUCxlQUFPLFFBSWxCO0FBRUQ7O0dBRUc7QUFDSCxNQUFxQixNQUFNO0lBUXpCLFlBQVksT0FBZTtRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksb0JBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsSUFBSSxDQUNSLFFBQWtCLEVBQ2xCLGdCQUEyQixFQUMzQixPQUFpQixFQUNqQixNQUFlO1FBRWYsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRTtnQkFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsT0FBTyxFQUFFLENBQUMsQ0FBQzthQUMvQztZQUNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQzFCO2FBQU07WUFDTCxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNsRCxNQUFNLENBQUMsT0FBTyxHQUFHO2dCQUNmLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztnQkFDaEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUNoQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87YUFDekIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FD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