"use strict";
/**
 * this file is a custom http provider used to proxy ETH rpc call to godwoken-polyjuice chain.
 * it is fork and based on https://github.com/ChainSafe/web3.js/tree/1.x/packages/web3-providers-http
 * this is only aims for nodejs development popurse. it will sign tx with private-key, which it is dangerours.
 * please ues it at your own risk.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolyjuiceHttpProviderCli = void 0;
const signer_1 = __importDefault(require("@polyjuice-provider/base/lib/signer"));
const providers_1 = require("./providers");
const lib_1 = require("../../base/lib");
class PolyjuiceHttpProviderCli extends providers_1.PolyjuiceHttpProvider {
    constructor(host, polyjuice_config, private_key, _options) {
        super(host, polyjuice_config);
        this.signer = new signer_1.default(private_key);
    }
    async send(payload, callback) {
        const { method, params } = payload;
        switch (method) {
            case "eth_sendTransaction":
                try {
                    const { from, gas, gasPrice, value, data } = params[0];
                    const to = lib_1.formalizeEthToAddress(params[0].to);
                    const data_with_short_address = await this.abi.refactor_data_with_short_address(data, this.godwoker.getShortAddressByAllTypeEthAddress.bind(this.godwoker));
                    const t = {
                        from: from,
                        to: to,
                        value: value || 0,
                        data: data_with_short_address || "",
                        gas: gas,
                        gasPrice: gasPrice,
                    };
                    const to_id = await this.godwoker.allTypeEthAddressToAccountId(to);
                    const sender_script_hash = this.godwoker.computeScriptHashByEoaEthAddress(from);
                    const receiver_script_hash = await this.godwoker.getScriptHashByAccountId(parseInt(to_id));
                    const polyjuice_tx = await this.godwoker.assembleRawL2Transaction(t);
                    // ready to sign tx
                    console.log(`it is very dangerous to sign with private-key, please use it carefully and only use in test development!`);
                    const message = this.godwoker.generateTransactionMessageToSign(polyjuice_tx, sender_script_hash, receiver_script_hash);
                    const _signature = await this.signer.sign_with_private_key(message, from);
                    const signature = this.godwoker.packSignature(_signature);
                    const tx_hash = await this.godwoker.gw_submitL2Transaction(polyjuice_tx, signature);
                    await this.godwoker.waitForTransactionReceipt(tx_hash);
                    const res = {
                        jsonrpc: payload.jsonrpc,
                        id: payload.id,
                        result: tx_hash,
                    };
                    callback(null, res);
                }
                catch (error) {
                    callback(null, {
                        jsonrpc: payload.jsonrpc,
                        id: payload.id,
                        error: error.message,
                    });
                }
                break;
            default:
                super.send(payload, callback);
                break;
        }
    }
}
exports.PolyjuiceHttpProviderCli = PolyjuiceHttpProviderCli;
//# sourceMappingURL=cli.js.map