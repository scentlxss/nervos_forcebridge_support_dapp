/**
 * this file is a custom http provider used to proxy ETH rpc call to godwoken-polyjuice chain.
 * it is fork and based on https://github.com/ChainSafe/web3.js/tree/1.x/packages/web3-providers-http
 */
/// <reference types="node" />
import * as http from "http";
import * as https from "https";
import { JsonRpcResponse } from "web3-core-helpers";
import { Godwoker, Signer, Abi, AbiItems } from "@polyjuice-provider/base";
export interface HttpHeader {
    name: string;
    value: string;
}
export interface HttpProviderAgent {
    baseUrl?: string;
    http?: http.Agent;
    https?: https.Agent;
}
export interface HttpProviderOptions {
    withCredentials?: boolean;
    timeout?: number;
    headers?: HttpHeader[];
    agent?: HttpProviderAgent;
    keepAlive?: boolean;
}
export interface ExperimentalFeatureOption {
    mode: boolean;
    private_key?: string;
}
export declare type PolyjuiceConfig = {
    rollupTypeHash: string;
    ethAccountLockCodeHash: string;
    abiItems?: AbiItems;
    web3Url?: string;
};
export declare class PolyjuiceHttpProvider {
    experimentalFeatureMode: boolean;
    signer: Signer;
    godwoker: Godwoker;
    abi: Abi;
    withCredentials: boolean;
    timeout: number;
    headers: HttpHeader[];
    agent: HttpProviderAgent;
    connected: boolean;
    host: string;
    httpsAgent: https.Agent;
    httpAgent: http.Agent;
    baseUrl: any;
    constructor(host: string, polyjuice_config: PolyjuiceConfig, options?: HttpProviderOptions);
    setAbi(abiItems: AbiItems): void;
    send(payload: any, callback?: (error: Error | null, result: JsonRpcResponse | undefined) => void): Promise<void>;
    _prepareRequest(): any;
    /**
     * Should be used to make async request
     *
     * @method send
     * @param {Object} payload
     * @param {Function} callback triggered on end with (err, result)
     */
    _send(payload: any, callback: any): void;
    /**
     * Returns the desired boolean.
     *
     * @method supportsSubscriptions
     * @returns {boolean}
     */
    supportsSubscriptions(): boolean;
    disconnect(): boolean;
}
